// Generated by CoffeeScript 1.7.1
(function() {
  var baseBoneRotation, boneColor, boneHand, boneHandLost, boneScale, initScene, jointColor, jointScale, scope;

  scope = null;

  initScene = function(targetEl) {
    var camera, directionalLight, height, render, renderer, width;
    scope.scene = new THREE.Scene();
    scope.renderer = renderer = new THREE.WebGLRenderer({
      alpha: true
    });
    width = window.innerWidth;
    height = window.innerHeight;
    renderer.setClearColor(0x000000, 0);
    renderer.setSize(width, height);
    renderer.domElement.className = "leap-boneHand";
    targetEl.appendChild(renderer.domElement);
    directionalLight = directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(0, 0.5, 1);
    scope.scene.add(directionalLight);
    directionalLight = directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(0.5, -0.5, -1);
    scope.scene.add(directionalLight);
    directionalLight = directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
    directionalLight.position.set(-0.5, 0, -0.2);
    scope.scene.add(directionalLight);
    scope.camera = camera = new THREE.PerspectiveCamera(45, width / height, 1, 10000);
    camera.position.fromArray([0, 300, 500]);
    camera.lookAt(new THREE.Vector3(0, 160, 0));
    scope.scene.add(camera);
    renderer.render(scope.scene, camera);
    window.addEventListener('resize', function() {
      width = window.innerWidth;
      height = window.innerHeight;
      camera.aspect = width / height;
      camera.updateProjectionMatrix();
      renderer.setSize(width, height);
      return renderer.render(scope.scene, camera);
    }, false);
    render = function() {
      renderer.render(scope.scene, camera);
      return window.requestAnimationFrame(render);
    };
    return render();
  };

  baseBoneRotation = (new THREE.Quaternion).setFromEuler(new THREE.Euler(Math.PI / 2, 0, 0));

  jointColor = (new THREE.Color).setHex(0x5daa00);

  boneColor = (new THREE.Color).setHex(0xffffff);

  boneScale = 1 / 6;

  jointScale = 1 / 5;

  boneHand = function(hand) {
    if (!scope.scene) {
      return;
    }
    return hand.fingers.forEach(function(finger) {
      var boneMeshes, boneRadius, jointMesh, jointMeshes, jointRadius, material;
      boneMeshes = finger.data("boneMeshes");
      jointMeshes = finger.data("jointMeshes");
      if (!boneMeshes) {
        boneMeshes = [];
        jointMeshes = [];
        material = !isNaN(scope.opacity) ? new THREE.MeshPhongMaterial({
          transparent: true,
          opacity: scope.opacity
        }) : new THREE.MeshPhongMaterial();
        if (!finger.bones) {
          console.warn("error, no bones on", hand.id);
          return;
        }
        boneRadius = hand.middleFinger.proximal.length / 6;
        jointRadius = hand.middleFinger.proximal.length / 5;
        finger.bones.forEach(function(bone) {
          var boneMesh, jointMesh;
          boneMesh = new THREE.Mesh(new THREE.CylinderGeometry(boneRadius, boneRadius, bone.length, 32), material.clone());
          boneMesh.material.color.copy(boneColor);
          scope.scene.add(boneMesh);
          boneMeshes.push(boneMesh);
          jointMesh = new THREE.Mesh(new THREE.SphereGeometry(jointRadius, 32, 32), material.clone());
          jointMesh.material.color.copy(jointColor);
          scope.scene.add(jointMesh);
          return jointMeshes.push(jointMesh);
        });
        jointMesh = new THREE.Mesh(new THREE.SphereGeometry(jointRadius, 32, 32), material.clone());
        jointMesh.material.color.copy(jointColor);
        scope.scene.add(jointMesh);
        jointMeshes.push(jointMesh);
        finger.data("boneMeshes", boneMeshes);
        finger.data("jointMeshes", jointMeshes);
      }
      boneMeshes.forEach(function(mesh, i) {
        var bone;
        bone = finger.bones[i];
        mesh.position.fromArray(bone.center());
        mesh.setRotationFromMatrix((new THREE.Matrix4).fromArray(bone.matrix()));
        return mesh.quaternion.multiply(baseBoneRotation);
      });
      return jointMeshes.forEach(function(mesh, i) {
        var bone;
        bone = finger.bones[i];
        if (bone) {
          return mesh.position.fromArray(bone.prevJoint);
        } else {
          bone = finger.bones[i - 1];
          return mesh.position.fromArray(bone.nextJoint);
        }
      });
    });
  };

  boneHandLost = function(hand) {
    var armMesh;
    hand.fingers.forEach(function(finger) {
      var boneMeshes, jointMeshes;
      boneMeshes = finger.data("boneMeshes");
      jointMeshes = finger.data("jointMeshes");
      if (!boneMeshes) {
        return;
      }
      boneMeshes.forEach(function(mesh) {
        return scope.scene.remove(mesh);
      });
      jointMeshes.forEach(function(mesh) {
        return scope.scene.remove(mesh);
      });
      finger.data({
        boneMeshes: null
      });
      return finger.data({
        jointMeshes: null
      });
    });
    armMesh = hand.data('armMesh');
    scope.scene.remove(armMesh);
    return hand.data('armMesh', null);
  };

  Leap.plugin('boneHand', function(options) {
    if (options == null) {
      options = {};
    }
    scope = options;
    scope.boneScale && (boneScale = scope.boneScale);
    scope.jointScale && (jointScale = scope.jointScale);
    scope.boneColor && (boneColor = scope.boneColor);
    scope.jointColor && (jointColor = scope.jointColor);
    this.use('handEntry');
    this.use('handHold');
    if (scope.scene === void 0) {
      console.assert(scope.targetEl);
      initScene(scope.targetEl);
    }
    this.on('handLost', boneHandLost);
    return {
      hand: boneHand
    };
  });

}).call(this);

//# sourceMappingURL=leap.bone-hand.map
